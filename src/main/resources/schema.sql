-- PUBLIC.USER definition

CREATE TABLE IF NOT EXISTS PUBLIC.USERS (
	USER_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	EMAIL varchar(100) NOT NULL,
	LOGIN varchar(255) NOT NULL,
	USER_NAME varchar(255),
	BIRTHDAY DATE NOT NULL,
	CONSTRAINT UMAIL_STANDARD CHECK (EMAIL LIKE '%@%')
);

-- PUBLIC.FRIENDS_STATUS definition

CREATE TABLE IF NOT EXISTS PUBLIC.FRIENDS_STATUS (
	STATUS_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	STATUS varchar(255) NOT NULL,
	CONSTRAINT STATUS_UNIQ UNIQUE (STATUS)
);

-- PUBLIC.FRIENDS definition

CREATE TABLE IF NOT EXISTS PUBLIC.FRIENDS (
	USER_ID BIGINT NOT NULL,
	OTHER_USER_ID BIGINT NOT NULL,
	STATUS_ID INTEGER NOT NULL,
	CONSTRAINT FRIENDS_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID),
	CONSTRAINT FRIENDS_FK_1 FOREIGN KEY (OTHER_USER_ID) REFERENCES PUBLIC.USERS(USER_ID),
	CONSTRAINT FRIENDS_FK_2 FOREIGN KEY (STATUS_ID) REFERENCES PUBLIC.FRIENDS_STATUS(STATUS_ID),
	CONSTRAINT FRIENDS_UNIQ UNIQUE (USER_ID, OTHER_USER_ID)
);

-- PUBLIC.MPA definition

CREATE TABLE IF NOT EXISTS PUBLIC.MPA (
	RATING_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	RATING varchar(10),
	CONSTRAINT RATING_UNIQ UNIQUE (RATING)
);

-- PUBLIC.FILM definition

CREATE TABLE IF NOT EXISTS PUBLIC.FILM (
	FILM_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	FILM_NAME varchar(500) NOT NULL,
	DESCRIPTION varchar(200),
	RELEASE_DATE DATE,
	DURATION INTEGER NOT NULL,
	RATING_ID INTEGER,
	CONSTRAINT FILM_FK FOREIGN KEY (RATING_ID) REFERENCES PUBLIC.MPA(RATING_ID),
	CONSTRAINT DURATION_POSITIVE CHECK (DURATION > 0),
	CONSTRAINT FILM_DATE CHECK (CAST(RELEASE_DATE AS DATE) >= '1895-12-28')
);

-- PUBLIC.GENRE definition

CREATE TABLE IF NOT EXISTS PUBLIC.GENRE (
	GENRE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	GENRE varchar(200) NOT NULL,

	CONSTRAINT GENRE_UNIQ UNIQUE (GENRE)
);

-- PUBLIC.FILM_GENRE definition

CREATE TABLE IF NOT EXISTS PUBLIC.FILM_GENRE (
	FILM_ID BIGINT NOT NULL,
	GENRE_ID INTEGER NOT NULL,
	CONSTRAINT FILM_GENRE_FK FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRE(GENRE_ID),
	CONSTRAINT FILM_GENRE_FK_1 FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILM(FILM_ID)
);



-- PUBLIC.FILMS_LIKES definition

CREATE TABLE IF NOT EXISTS PUBLIC.FILMS_LIKES (
	FILM_ID BIGINT NOT NULL,
	USER_ID BIGINT NOT NULL,
	CONSTRAINT FILMS_LIKES_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILM(FILM_ID),
	CONSTRAINT FILMS_LIKES_FK_1 FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID),
	CONSTRAINT FILM_LIKES_UNIQ UNIQUE (FILM_ID, USER_ID)
);